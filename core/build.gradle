plugins {
    id "com.jfrog.bintray" version "1.7.1"
    id "com.marklogic.ml-gradle" version "2.3.4"
}

dependencies {
    compile "com.marklogic:java-client-api:4.0.0-EA3"
    // Used by ML Job Repo implementation; depends on DataFieldMaxValueIncrementer
    compile "org.springframework:spring-jdbc:4.2.6.RELEASE"

    // Used by MarkLogicBatchConfiguration, which depends on Jaxb2Marshaller
    compile "org.springframework:spring-oxm:4.2.6.RELEASE"

    // For deploying the ML Job Repo
    compile "com.marklogic:ml-app-deployer:2.3.0"

    // For the CLI
    compile "net.sf.jopt-simple:jopt-simple:5.0.1"

    testCompile "com.marklogic:ml-junit:2.6.0"

}

jar {
    manifest {
        attributes(
                'Main-Class': 'com.marklogic.spring.batch.Main'
        )
    }
}

ext {
    mlAppConfig {
        createTriggersDatabase = false
    }
}

task deployMarkLogicJobRepository(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'com.marklogic.spring.batch.Main'
    args = ["--deploy_job_repo", "--jr_name", mlJobRepositoryName, "--jr_host", mlHost, "--jr_port", mlRestPort, "--jr_username", mlManageUsername, "--jr_password", mlManagePassword]
}

task undeployMarkLogicJobRepository(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'com.marklogic.spring.batch.Main'
    args = ["--undeploy_job_repo", "--jr_name", mlJobRepositoryName, "--jr_host", mlHost, "--jr_port", mlRestPort, "--jr_username", mlManageUsername, "--jr_password", mlManagePassword]
}

mlInstallAdmin {
  adminUsername = project.hasProperty('mlAdminUsername') ? project.property('mlAdminUsername') : ''
  adminPassword = project.hasProperty('mlAdminPassword') ? project.property('mlAdminPassword') : ''
}

// Setup the Job Repo in our test application so it's available for use by tests.
mlPostDeploy.dependsOn deployMarkLogicJobRepository
mlUndeploy.dependsOn undeployMarkLogicJobRepository

bintray {
    user = project.hasProperty('bintrayUser') ? project.property('bintrayUser') : System.getenv('BINTRAY_USER')
    key = project.hasProperty('bintrayApiKey') ? project.property('bintrayApiKey') : System.getenv('BINTRAY_KEY')
    publications = [bintrayPublicationName]
    pkg {
        repo = bintrayRepo
        name = artifactId
        userOrg = bintrayUserOrg
        licenses = [bintrayLicense]
        vcsUrl = bintrayVcsUrl
        version {
            name = project.version
            released = new Date()
            vcsTag = project.version
        }
    }
}